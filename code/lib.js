let Y = [
    0.1,
    0.12,
    0.13,
    0.14,
    0.15,
    0.16,
    0.17,
    0.18,
    0.19,
    0.195,
    0.2,
    0.245,
    0.261,
    0.277,
    0.29,
    0.296,
    0.303,
    0.309,
    0.314,
    0.322,
    0.328,
    0.331,
    0.334,
    0.337,
    0.3415,
    0.346,
    0.348194820120845,
    0.353,
    0.359,
    0.359,
    0.362462734651518,
    0.365841618977844,
    0.369130330334214,
    0.371,
    0.375411943558031,
    0.378392200135951,
    0.381256993164862,
    0.384,
    0.386617146077496,
    0.389113349157062,
    0.391495775079305,
    0.39377158968483,
    0.397,
    0.398032048308157,
    0.40003102400717,
    0.401952051751892,
    0.40380229738293,
    0.405588926740889,
    0.407319105666377,
    0.409,
    0.410637643006847,
    0.412233537649949,
    0.413788054316817,
    0.415301563394964,
    0.4155,
    0.418207040335146,
    0.41875,
    0.420375,
    0.4211875,
    0.422,
    0.4228665,
    0.423733333333333,
    0.4246,
    0.425466666666666,
    0.426333333333333,
    0.427199999999999,
    0.428066666666666,
    0.428933333333333,
    0.4298,
    0.430666666666666,
    0.431533333333333,
    0.4324,
    0.433266666666666,
    0.434133333333333,
    0.435,
    0.43596,
    0.43644,
    0.43692,
    0.4374,
    0.43788,
    0.43836,
    0.43884,
    0.43932,
    0.4398,
    0.44028,
    0.44076,
    0.44124,
    0.44172,
    0.4422,
    0.44268,
    0.44316,
    0.44364,
    0.44412,
    0.4446,
    0.44508,
    0.44556,
    0.44604,
    0.44652,
    0.446972451101913,
    0.447,
    0.44752,
    0.44778,
    0.44804,
    0.4483,
    0.44856,
    0.44882,
    0.44908,
    0.44934,
    0.4496,
    0.44986,
    0.45012,
    0.45038,
    0.45064,
    0.4509,
    0.45116,
    0.45142,
    0.45168,
    0.45194,
    0.4522,
    0.45246,
    0.45272,
    0.45298,
    0.45324,
    0.4535,
    0.45376,
    0.45402,
    0.45428,
    0.45454,
    0.4548,
    0.45506,
    0.45532,
    0.45558,
    0.45584,
    0.4561,
    0.45636,
    0.45662,
    0.45688,
    0.45714,
    0.4574,
    0.45766,
    0.45792,
    0.45818,
    0.45844,
    0.4587,
    0.45896,
    0.45922,
    0.45948,
    0.45974,
    0.426700256106949,
    0.46,
    0.46008,
    0.46016,
    0.46024,
    0.46032,
    0.4604,
    0.46048,
    0.46056,
    0.46064,
    0.46072,
    0.4608,
    0.46088,
    0.46096,
    0.46104,
    0.46112,
    0.4612,
    0.46128,
    0.46136,
    0.46144,
    0.46152,
    0.4616,
    0.46168,
    0.46176,
    0.46184,
    0.46192,
    0.462,
    0.46208,
    0.46216,
    0.46224,
    0.46232,
    0.4624,
    0.46248,
    0.46256,
    0.46264,
    0.46272,
    0.4628,
    0.46288,
    0.46296,
    0.46304,
    0.46312,
    0.4632,
    0.46328,
    0.46336,
    0.46344,
    0.46352,
    0.4636,
    0.46368,
    0.46376,
    0.46384,
    0.46392,
    0.464,
    0.46408,
    0.46416,
    0.46424,
    0.46432,
    0.4644,
    0.46448,
    0.46456,
    0.46464,
    0.46472,
    0.4648,
    0.46488,
    0.46496,
    0.46504,
    0.46512,
    0.4652,
    0.46528,
    0.46536,
    0.46544,
    0.46552,
    0.4656,
    0.46568,
    0.46576,
    0.46584,
    0.46592,
    0.465999999999999,
    0.46608,
    0.46616,
    0.46624,
    0.46632,
    0.4664,
    0.46648,
    0.46656,
    0.46664,
    0.466719999999999,
    0.4668,
    0.46688,
    0.46696,
    0.46704,
    0.46712,
    0.4672,
    0.46728,
    0.46736,
    0.467439999999999,
    0.46752,
    0.4676,
    0.46768,
    0.46776,
    0.46784,
    0.46792,
    0.467999999999999,
    0.46808,
    0.468159999999999,
    0.46824,
    0.46832,
    0.4684,
    0.46848,
    0.46856,
    0.46864,
    0.468719999999999,
    0.4688,
    0.468879999999999,
    0.46896,
    0.46904,
    0.46912,
    0.4692,
    0.46928,
    0.46936,
    0.469439999999999,
    0.46952,
    0.469599999999999,
    0.46968,
    0.469759999999999,
    0.46984,
    0.46992,
    0.47,
    0.47008,
    0.470159999999999,
    0.47024,
    0.470319999999999,
    0.4704,
    0.470479999999999,
    0.47056,
    0.47064,
    0.470719999999999,
    0.4708,
    0.470879999999999,
    0.47096,
    0.471039999999999,
    0.47112,
    0.471199999999999,
    0.47128,
    0.47136,
    0.471439999999999,
    0.47152,
    0.471599999999999,
    0.47168,
    0.471759999999999,
    0.47184,
    0.471919999999999,
    0.472,
    0.47208,
    0.472159999999999,
    0.47224,
    0.472319999999999,
    0.4724,
    0.472479999999999,
    0.47256,
    0.472639999999999,
    0.47272,
    0.4728,
    0.472879999999999,
    0.47296,
    0.473039999999999,
    0.47312,
    0.473199999999999,
    0.47328,
    0.47336,
    0.473439999999999,
    0.47352,
    0.473599999999999,
    0.47368,
    0.473759999999999,
    0.47384,
    0.473919999999999,
    0.474,
    0.47408,
    0.474159999999999,
    0.47424,
    0.474319999999999,
    0.4744,
    0.474479999999999,
    0.47456,
    0.474639999999999,
    0.47472,
    0.4748,
    0.474879999999999,
    0.47496,
    0.475039999999999,
    0.47512,
    0.475199999999999,
    0.47528,
    0.47536,
    0.47544,
    0.47552,
    0.475599999999999,
    0.47568,
    0.475759999999999,
    0.47584,
    0.475919999999999,
    0.476,
    0.47608,
    0.476159999999999,
    0.47624,
    0.476319999999999,
    0.4764,
    0.476479999999999,
    0.47656,
    0.476639999999999,
    0.47672,
    0.4768,
    0.476879999999999,
    0.47696,
    0.477039999999999,
    0.47712,
    0.477199999999999,
    0.47728,
    0.47736,
    0.47744,
    0.47752,
    0.477599999999999,
    0.47768,
    0.477759999999999,
    0.47784,
    0.477919999999999,
    0.478,
    0.47808,
    0.47816,
    0.47824,
    0.478319999999999,
    0.4784,
    0.478479999999999,
    0.47856,
    0.478639999999999,
    0.47872,
    0.4788,
    0.47888,
    0.47896,
    0.479039999999999,
    0.47912,
    0.479199999999999,
    0.47928,
    0.47936,
    0.47944,
    0.47952,
    0.479599999999999,
    0.47968,
    0.479759999999999,
    0.47984,
    0.479919999999999,
    0.48,
    0.485
]

geometryFactor = (N, N2) => {
    let x = [17, 20, 24, 30, 35, 40, 45, 50, 60, 80, 125];
    let y_right = [17, 25, 35, 50, 85, 170];
    let count_x = 0;
    let count_y = 0;

    while (N >= x[count_x])
        count_x += 1;
    while (N2 >= y_right[count_y])
        count_y += 1;

    let g = new Array(170);

    for (let i = 0; i < 170; i++) {
        g[i] = new Array(170);
    }
    g[17][17] = 0.292;
    g[17][25] = 0.304;
    g[17][35] = 0.309;
    g[17][50] = 0.31;
    g[17][85] = 0.319;
    g[17][170] = 0.328;
    g[20][17]  = 0.311;
    g[20][25]  = 0.32;
    g[20][35]  = 0.329;
    g[20][50]  = 0.33;
    g[20][85]  = 0.339;
    g[20][170] = 0.342;
    g[24][17]  = 0.334;
    g[24][25]  = 0.34;
    g[24][35]  = 0.35;
    g[24][50]  = 0.355;
    g[24][85]  = 0.361;
    g[24][170] = 0.368;
    g[30][17]  = 0.359;
    g[30][25]  = 0.365;
    g[30][35]  = 0.3746;
    g[30][50]  = 0.3809;
    g[30][85]  = 0.39;
    g[30][170] = 0.398;
    g[35][17]  = 0.37;
    g[35][25]  = 0.38;
    g[35][35]  = 0.39;
    g[35][50]  = 0.388;
    g[35][85]  = 0.405;
    g[35][170] = 0.415;
    g[40][17]  = 0.38;
    g[40][25]  = 0.39;
    g[40][35]  = 0.4;
    g[40][50]  = 0.41;
    g[40][85]  = 0.42;
    g[40][170] = 0.43;
    g[45][17]  = 0.389;
    g[45][25]  = 0.399;
    g[45][35]  = 0.41;
    g[45][50]  = 0.42;
    g[45][85]  = 0.4299;
    g[45][170] = 0.44;
    g[50][17]  = 0.395;
    g[50][25]  = 0.405;
    g[50][35]  = 0.418;
    g[50][50]  = 0.4283;
    g[50][85]  = 0.4384;
    g[50][170] = 0.4487;
    g[60][17]  = 0.405;
    g[60][25]  = 0.4186;
    g[60][35]  = 0.4285;
    g[60][50]  = 0.44;
    g[60][85]  = 0.45;
    g[60][170] = 0.461;
    g[80][17]  = 0.4189;
    g[80][25]  = 0.43;
    g[80][35]  = 0.4417;
    g[80][50]  = 0.455;
    g[80][85]  = 0.4675;
    g[80][170] = 0.48;
    g[125][17]  = 0.4309;
    g[125][25]  = 0.4467;
    g[125][35]  = 0.4585;
    g[125][50]  = 0.4721;
    g[125][85]  = 0.4819;
    g[125][170] = 0.50;

    let x_ = count_x === 0 ?  0: count_x-1
    let y_ = count_y === 0 ?  0: count_y-1

    let j1 = g[x[x_]][y_right[y_]];
    
    let j2 = g[x[count_x]][y_right[count_y]];

  return (j1+j2)/2;

}

FOS = (m, N, N2, F, rpm, torque, pr, elasticModulus, hardness, Q, Ko, process, material, grade) => {
    let D = (m * N) / 25.4; //in in.
    let P = 25.4 / m;

    let reduction = N2 / N;
    let force = 0.225 * 2000 * torque / (D * 25.4);

    let Kb = 1, Zr = 1,
        phi = 20,    // pressure angle
        Kr = 1.25,   // Reliability factor

        Kt = 1, mn = 1, Cmc = 1, Cpm = 1, Ce = 1, A1 = 0.0675, B1 = 0.0128, C = -0.926E-4;

    //Dynamic Factor (Kv)
    let v = (D * 25.4 / 2000) * rpm * (Math.PI / 30) * 196.85;
    let B = 0.25 * Math.pow(12 - Q, 2 / 3);
    let A = 50 + 56 * (1 - B)
    let Kv = Math.pow((A + Math.sqrt(v)) / A, B);
    let Cpf;

    //Load Distribution Factor (Cpf)
    if (F <= 1) {
        Cpf = F / (10 * D) - 0.025;
    } else {
        Cpf = F / (10 * D) - 0.0375 + (0.0125 * F);
    }

    let Cma = A1 + B1 * F + C * F ** 2;
    let Km = 1 + Cmc * (Cpf * Cpm + Cma * Ce);

    //Size Factor
    let Ks = 1.192 * Math.pow(F * Math.sqrt(Y[N - 1]) / P, 0.0535);

    //Surface strength geometry factorP
    let mg = reduction;
    let I = (Math.cos(phi) * Math.sin(phi) / 2 * mn) * (mg / (mg + 1));

    //Elasticity coefficient
    let a = Math.PI * ((1 - pr ** 2) / elasticModulus + (1 - pr ** 2) / elasticModulus);
    let Cp = Math.sqrt(1 / a) * 380.838 //in root(psi)  380.838 for conversion  root(GPa) --> root(psi)

    //Geometry Factor
    let J = geometryFactor(N, N2);

    let St = 77.3*hardness + 12800;
    let Sc = 322* hardness * 1.928 + 29100;
    let Bending_stress = force * Ko * Kv * Ks * Km * Kb * P / (F * J);
    let Contact_stress = Cp * Math.sqrt(force * Ko * Kv * Ks * Km / (D * F * I));

    let Yn = 1.3558 * Math.pow(1e7, -0.0178);
    let Zn = 1.4488 * Math.pow(1e7, -0.023);

    if(process===2 && material===0 && grade===1) {                 //Through hardened  g-1
         St = 77.3*hardness + 12800; //in psi
         Sc = 322* hardness * 1.928 + 29100; //in psi    
    }
    if(process===2 && material===0 && grade===2) {                 //Through hardened  g-2
         St = 102*hardness + 16400; //in psi
         Sc = 349 * hardness * 1.928 + 34300; //in psi    
    }
    if(process===3 && material===0 && grade===1) {                 //Nitrided and through hardened  g-1
         St = 82.3*hardness + 12150; //in psi
         Sc = 152500; //in psi    
    }
    if(process===3 && material===0 && grade===2) {                 //Nitrided and through hardened  g-2
         St = 108.6*hardness + 15890; //in psi
         Sc = 165500; //in psi    
    }
    if(process===0 && material===0 && grade===1) {                 //Carburized and hardened (Steel)  g-1
         St = 55000; //in psi
         Sc = 180000; //in psi    
    }
    if(process===0 && material===0 && grade===2) {                 //Carburized and hardened (Steel)  g-2
         St = 67500; //in psi
         Sc = 225000; //in psi    
    }
    if(process===4 && material===0 && grade===1) {                 //Flame or Induction Hardened  g-1
         St = 45000; //in psi
         Sc = 172000; //in psi    
    }
    if(process===4 && material===0 && grade===2) {                 //Flame or Induction Hardened  g-2
         St = 55000; //in psi
         Sc = 192000; //in psi    
    }
    if(process===1 && material===2 && grade===1) {                 //Nitrided Nitralloy 135,N  g-1
         St = 86.2*hardness + 12730; //in psi
         Sc = 170000; //in psi    
    }
    if(process===1 && material===2 && grade===2) {                //Nitrided Nitralloy 135,N  g-2
         St = 113.8*hardness + 16650; //in psi
         Sc = 183000; //in psi    
    }
    if(process===1 && material===3 && grade===1) {     //N            //Nitrided  Nitralloy 135,N g-1
         St = 86.2*hardness + 12730; //in psi
         Sc = 172000; //in psi    
    }
    if(process===1 && material===3 && grade===2) {     //N            //Nitrided Nitralloy 135,N g-2
         St = 113.8*hardness + 16650; //in psi
         Sc = 188000; //in psi    
    }
    if(process===1 && material===1 && grade===1) {                //Nitrided 2.5% chrome  g-1
         St = 105.2*hardness + 9280; //in psi
         Sc = 155000; //in psi    
    }
    if(process===1 && material===1 && grade===2) {                //Nitrided 2.5% chrome  g-2
         St = 105.2*hardness + 22280; //in psi
         Sc = 172000; //in psi    
    }

    const fos_b = St * Yn / (Kt * Kr * Bending_stress);
    const fos_c = Sc * Zn / (Kt * Kr * Contact_stress);
    return [fos_b, fos_c]

}


worst_case_loading = (torque, power) => {
    let avg_rpm = (power / torque) * (30 / Math.PI);
    return [torque, avg_rpm]
}


module.exports = {
     FOS : FOS,
     worst_case_loading : worst_case_loading
}